a <- focus$date
a %m+% months(1)
a %m+% months(10)
focus %>%
mutate(date2 = date %+% months(11))
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2017-02-01",
end_date = "2021-04-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
focus$date
View(focus)
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2017-02-01",
end_date = "2021-04-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2017-02-01",
end_date = "2021-04-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)
View(focus)
focus %>%
arrange(date)
View(focus)
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2017-02-01",
end_date = "2021-04-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)
View(focus)
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2017-02-01",
end_date = "2021-04-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)%>%
arrange(date)
View(focus)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
# Ajeitando datas
focus %>%
mutate(date2 = date %+% months(11))
# Ajeitando datas
a = focus %>%
mutate(date2 = date %+% months(11))
View(a)
# Ajeitando datas
date2 <- focus$date %+% months(12-1)
focus$date
focus$date %>% class()
# Ajeitando datas
focus %>%
mutate(date = date %m+% months(12-1))
View(focus)
focus %>% view()
# Ajeitando datas
focus <- focus %>%
mutate(date = date %m+% months(12-1))
View(focus)
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2016-03-01",
end_date = "2021-04-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)%>%
arrange(date)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
# Ajeitando datas
focus <- focus %>%
mutate(date = date %m+% months(12-1))
View(focus)
data[[1]]$ref.date %>% max()
# Ajeitando datas
date_min <- data[[1]]$ref.date %>% min()
date_max <- data[[1]]$ref.date %>% max()
# agora vou puxar varios meses e depois vou filtrar pro intervalo de tempo das bases
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2015-03-01",
end_date = "2021-04-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)%>%
arrange(date)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
# Ajeitando datas
date_min <- data[[1]]$ref.date %>% min()
date_max <- data[[1]]$ref.date %>% max()
focus <- focus %>%
mutate(date = date %m+% months(12-1)) %>%
filter(date <= max_date,
date => min_date) #ultima
focus <- focus %>%
mutate(date = date %m+% months(12-1)) %>%
filter(date <= max_date,
date >= min_date) #ultima
# Ajeitando datas
min_date <- data[[1]]$ref.date %>% min()
max_date <- data[[1]]$ref.date %>% max()
focus <- focus %>%
mutate(date = date %m+% months(12-1)) %>%
filter(date <= max_date,
date >= min_date) #ultima
View(focus)
# agora vou puxar varios meses e depois vou filtrar pro intervalo de tempo das bases
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2015-03-01",
end_date = "2021-04-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)%>%
arrange(date)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
# Ajeitando datas
min_date <- data[[1]]$ref.date %>% min()
max_date <- data[[1]]$ref.date %>% max()
window
data[[1]]$ref.date[window]
data[[1]]$ref.date[window+1]
max_date <- data[[1]]$ref.date %>% max()
max_date
# agora vou puxar varios meses e depois vou filtrar pro intervalo de tempo das bases
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2015-03-01",
end_date = "2021-04-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)%>%
arrange(date)
# agora vou puxar varios meses e depois vou filtrar pro intervalo de tempo das bases
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2015-03-01",
end_date = "2021-04-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)%>%
arrange(date)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
# Ajeitando datas
min_date <- data[[1]]$ref.date[window+1]
max_date <- data[[1]]$ref.date %>% max()
focus <- focus %>%
mutate(date = date %m+% months(12-1)) %>%
filter(date <= max_date,
date >= min_date) #ultima
View(focus)
rmse(y_obs,focus$median)
library(Metrics)
rmse(y_obs,focus$median)
rmse_focus <- rmse(y_obs,focus$median)
rmse
rmse%>%view()
# 5.4.3) Normalizing rmse with rmse_focus
rmse <- rmse/rmse_focus
View(rmse)
data[[1]]
data[[1]] %>%View()
library(tidyverse)
data[[1]] %>%View()
acumulacao <- list(3,6,12)
data <- acumulacao %>%
map(~paste("~/GitHub2/Undergraduate-Thesis/data2/df",.x,".rds",sep = "")%>%
readRDS())
# tirando as (12-1) primeiras linhas ja que acumulei inflacao em "12" meses (e tiro a ultima linha pois eh NA pra td mundo)
data <- data %>%
map(~ .x[-c(1:11, nrow(.x)),]) %>%
map(~ remove_rownames(.x))
acumulacao <- list(3,6,12)
data <- acumulacao %>%
map(~paste("~/MONOGRAFIA_TITO/data/df",.x,".rds",sep = "")%>%
readRDS())
# tirando as (12-1) primeiras linhas ja que acumulei inflacao em "12" meses (e tiro a ultima linha pois eh NA pra td mundo)
data <- data %>%
map(~ .x[-c(1:11, nrow(.x)),]) %>%
map(~ remove_rownames(.x))
# horizonte
k <- 12
# window (fixed) size: vou usar data[[1]], mas poderia ser qualquer outro
window <- data[[1]] %>% filter(ref.date <"2018-01-01") %>% nrow()
window <- window - k +1
y <- data[[1]] %>% #(poderia usar qualquer um dos dfs de data)
select(ipca) %>%
as.matrix()
library(tidyverse)
library(randomForest)
library(tidyverse)
library(HDeconometrics)
library(Metrics)
library(reshape2)
library(ggplot2)
library(ggsci)
library(gridExtra)
library(glmnet)
library(rbcb)
library(lubridate)
#################
# 1) Loading data
#################
acumulacao <- list(3,6,12)
data <- acumulacao %>%
map(~paste("~/MONOGRAFIA_TITO/data/df",.x,".rds",sep = "")%>%
readRDS())
# tirando as (12-1) primeiras linhas ja que acumulei inflacao em "12" meses (e tiro a ultima linha pois eh NA pra td mundo)
data <- data %>%
map(~ .x[-c(1:11, nrow(.x)),]) %>%
map(~ remove_rownames(.x))
# como vou querer prever inflacao acumulada "i" periodos a frente,
# devo fazer a o decimo segundo elemento da coluna ipca virar o
# primeiro, e assim sucessivamente para estimar o modelo "i" periodos
# a frente
# Codigo abaixo errado (?)
#data <- map2
###########################
# horizonte
k <- 12
# window (fixed) size: vou usar data[[1]], mas poderia ser qualquer outro
window <- data[[1]] %>% filter(ref.date <"2018-01-01") %>% nrow()
window <- window - k +1
# variavel dependente (igual para todos)
#y <- data %>%
#  map(~.x %>%
#        select(ipca) %>%
#        as.matrix)
y <- data[[1]] %>% #(poderia usar qualquer um dos dfs de data)
select(ipca) %>%
as.matrix()
# matriz de regressores
X <- data %>%
map(~.x %>%
select(-c(ref.date,ipca))%>%
select_if(~ !any(is.na(.))) %>% # tirando colunas com NA
as.matrix())
# numero de previsoes (igual pra todos)
size <- nrow(data[[1]]) - window - 1
#size <- data %>%
#  map(~nrow(.x) - window - 1)
# valores observados (out of sample)
y_obs <- y[(window+1):nrow(data[[1]])]
#y_obs <- map2(y,data,
#              ~.x[(window+1):nrow(.y)])
#######################
# 3.1) Random Forest ##
#######################
rf <- list()
for (i in 1:length(data)) {
rf[[i]] <- 0:size %>%
map_dbl(
function(x){ randomForest(X[[i]][(1+ x):(window+x), ],
y[(1+ x):(window+ x)]) %>%
predict(X[[i]][(window+x + 1), ])}
)
}
###############
# 3.2) LASSO ##
###############
lasso <- list()
for (i in 1:length(data)) {
lasso[[i]] <- 0:size %>%
map_dbl(
function(x){ ic.glmnet(X[[i]][(1+ x):(window+ x), ],
y[(1+ x):(window+ x)], alpha = 1, crit = "bic") %>%
predict(X[[i]][(window+x + 1), ])}
)
}
###############
# 3.3) RIDGE ##
###############
ridge <- list()
for (i in 1:length(data)) {
ridge[[i]] <- 0:size %>%
map_dbl(
function(x){ ic.glmnet(X[[i]][(1+ x):(window+ x), ],
y[(1+ x):(window+ x)], alpha = 0, crit = "bic") %>%
predict(X[[i]][(window+x + 1), ])}
)
}
View(rmse)
View(ridge)
View(rf)
View(ridge)
acumulacao <- list(3,6,12)
data <- acumulacao %>%
map(~paste("~/MONOGRAFIA_TITO/data/df",.x,".rds",sep = "")%>%
readRDS())
library(randomForest)
library(tidyverse)
library(HDeconometrics)
library(Metrics)
library(reshape2)
library(ggplot2)
library(ggsci)
library(gridExtra)
library(glmnet)
library(rbcb)
library(lubridate)
acumulacao <- list(3,6,12)
data <- acumulacao %>%
map(~paste("~/MONOGRAFIA_TITO/data/df",.x,".rds",sep = "")%>%
readRDS())
# tirando as (12-1) primeiras linhas ja que acumulei inflacao em "12" meses (e tiro a ultima linha pois eh NA pra td mundo)
data <- data %>%
map(~ .x[-c(1:11, nrow(.x)),]) %>%
map(~ remove_rownames(.x))
data[[1]]%>%view()
# horizonte
k <- 12
# window (fixed) size: vou usar data[[1]], mas poderia ser qualquer outro
window <- data[[1]] %>% filter(ref.date <"2018-01-01") %>% nrow()
window <- window - k +1
y <- data[[1]] %>% #(poderia usar qualquer um dos dfs de data)
select(ipca) %>%
as.matrix()
# matriz de regressores
X <- data %>%
map(~.x %>%
select(-c(ref.date,ipca))%>%
select_if(~ !any(is.na(.))) %>% # tirando colunas com NA
as.matrix())
# numero de previsoes (igual pra todos)
size <- nrow(data[[1]]) - window - 1
# valores observados (out of sample)
y_obs <- y[(window+1):nrow(data[[1]])]
y_obs
a = X[[1]][1:(window+x), ]
a = X[[1]][1:window, ]
b = y[1:window]
ic.glmnet(a,b,crit = "bic", alpha = 1)%>%predict(X[[1]][(window+1), ])
ic.glmnet(a,b,crit = "bic", alpha = 0)%>%predict(X[[1]][(window+1), ])
a = x[[1]]
a = data[[1]]
X
X[[1]]
a = X[[1]]
ic.glmnet(a[1:122],b[1:122])%>%
predict(a[123])
ic.glmnet(a[1:122,],b[1:122])%>%
predict(a[123,])
ic.glmnet(a[1:122,],y[1:122],crit = "bic", alpha = 1)%>%predict(a[123,])
y_obs[1:6]
ic.glmnet(a[1:122,],y[1:122],crit = "bic", alpha = 1)%>%predict(a[123,])
ic.glmnet(a[2:123,],y[2:123],crit = "bic", alpha = 1)%>%predict(a[124,])
ic.glmnet(a[3:124,],y[3:124],crit = "bic", alpha = 1)%>%predict(a[125,])
window
size
# numero de previsoes (igual pra todos)
size <- nrow(data[[1]]) - window - 1
window+size
nrow(data[[1]])
lasso <- list()
for (i in 1:length(data)) {
lasso[[i]] <- 0:size %>%
map_dbl(
function(x){ ic.glmnet(X[[i]][(1+ x):(window+ x), ],
y[(1+ x):(window+ x)], alpha = 1, crit = "bic") %>%
predict(X[[i]][(window+x + 1), ])}
)
}
lasso[[1]]
window
for (i in 0:window) {
ic.glmnet(X[[1]][(1+i):(window+i),],y[(1+i):(window+i)],crit = "bic",alpha =  = 1)%>%
predict(X[[1]][(window+1+i),])
}
for (i in 0:window) {
ic.glmnet(X[[1]][(1+i):(window+i),],y[(1+i):(window+i)],crit = "bic",alpha = 1)%>%
predict(X[[1]][(window+1+i),])
}
window+size
for (i in 0:size) {
ic.glmnet(X[[1]][(1+i):(window+i),], y[(1+i):(window+i)], crit = "bic",alpha = 1)%>%
predict(X[[1]][(window+1+i),])
}
lasso <- list()
for (i in 0:size) {
lasso[[i]] <- ic.glmnet(X[[1]][(1+i):(window+i),], y[(1+i):(window+i)], crit = "bic",alpha = 1)%>%
predict(X[[1]][(window+1+i),])
}
lasso <- list()
for (i in 0:size) {
lasso[[i]] <- ic.glmnet(X[[1]][(1+i):(window+i),], y[(1+i):(window+i)], crit = "bic",alpha = 1)%>%
predict(X[[1]][(window+1+i),])
}
lasso <- rep(0,size)
for (i in 0:size) {
lasso[i] <- ic.glmnet(X[[1]][(1+i):(window+i),], y[(1+i):(window+i)], crit = "bic",alpha = 1)%>%
predict(X[[1]][(window+1+i),])
}
lasso <- list(rep(list(),3))
lasso <- rep(list(list(),3))
lasso <- rep(list(list()),3)
for (i in 1:3) {lasso[[i]] <- rep(0,size)}
for (j in 1:3) {
for (i in 0:size) {
lasso[[j]][[i]] <- ic.glmnet(X[[j]][(1+i):(window+i),], y[(1+i):(window+i)], crit = "bic",alpha = 1)%>%
predict(X[[j]][(window+1+i),])
}
}
lasso <- rep(0,size)
for (i in 0:size) {
lasso[i] <- ic.glmnet(X[[1]][(1+i):(window+i),], y[(1+i):(window+i)], crit = "bic",alpha = 1)%>%
predict(X[[1]][(window+1+i),])
}
lasso6 <- rep(0,size)
for (i in 0:size) {
lasso6[i] <- ic.glmnet(X[[2]][(1+i):(window+i),], y[(1+i):(window+i)], crit = "bic",alpha = 1)%>%
predict(X[[2]][(window+1+i),])
}
lasso12 <- rep(0,size)
for (i in 0:size) {
lasso12[i] <- ic.glmnet(X[[3]][(1+i):(window+i),], y[(1+i):(window+i)], crit = "bic",alpha = 1)%>%
predict(X[[3]][(window+1+i),])
}
#######
rmse(y_obs,lasso3)
lasso3 <- rep(0,size)
for (i in 0:size) {
lasso3[i] <- ic.glmnet(X[[1]][(1+i):(window+i),], y[(1+i):(window+i)], crit = "bic",alpha = 1)%>%
predict(X[[1]][(window+1+i),])
}
#######
rmse(y_obs,lasso3)
length(y_obs)
length(lasso3)
rmse(y_obs,lasso6)
rmse(y_obs,lasso12)
nrow(data[[1]])-window +1
length(y_obs)
window+1+size
data[[1]][(size+1):nrow(data[[1]]),]
b =data[[1]][(size+1):nrow(data[[1]]),]
View(b)
size
b =data[[1]][(window+1):nrow(data[[1]]),]
load("~/MONOGRAFIA_TITO/my_workspace.RData")
setwd("~/MONOGRAFIA_TITO")
df = data[[6]]
plots <- lapply(names(df)[-1], function(col) {
plot(df$ref.date, df[[col]], type = "l", main = col, xlab = "ref.date")
})
load("~/MONOGRAFIA_TITO/my_workspace.RData")
setwd("~/MONOGRAFIA_TITO")
df = data[[6]]
# Open a PDF file for saving the plots
pdf("my_plots.pdf")
lapply(names(df)[-1], function(col) {
plot(df$ref.date, df[[col]], type = "l", main = col, xlab = "ref.date")
})
plots <- lapply(names(df)[-1], function(col) {
plot(df$ref.date, df[[col]], type = "l", main = col, xlab = "ref.date")
})
View(plots)
plots[[1]]
load("~/MONOGRAFIA_TITO/my_workspace.RData")
setwd("~/MONOGRAFIA_TITO")
df = data[[6]]
plots <- lapply(names(df)[-1], function(col) {
plot(df$ref.date, df[[col]], type = "l", main = col, xlab = "ref.date")
})
