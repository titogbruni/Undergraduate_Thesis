focus <- focus %>%
mutate(date = date %m+% months(11)) %>%
rename("ref.date" = "date",
"focus" = "median")
# merging
df <- merge(df, focus, by = "ref.date")
View(df)
focus[86]
df$focus[86]
lag(1:3)
load("~/GitHub2/MONOGRAFIA_TITO/micro_dataframes.RData")
rm(df)
for (k in 2:12) {
########################
## unindo dataframes ###
########################
df <- list(prices, commodities, real_sector, employment, electricity,
confidence,finance, credit, gov, inter) %>%
reduce(full_join, by='ref.date')
#################################################################
# 1) extract the variable names from the columns of df
# 2) extract names within the column "variables" in the .xlsl file
# Later we will create a correspondence between the names
################################################################
#df <- head(df,-1)
names_df <- colnames(df[,-1])
names_variables <- variable_description$variable
##########
# lags ###
##########
for (i in 1:length(names_df)) {
position <- which(names_variables == names_df[i])
lag_value <- variable_description$lag[position]
name <- names_df[i]
df[,name] <- lead(df[,name],n = lag_value)
}
rm(i)
# 4) defina valor de "k": quantos periodos voce quer acumular as variaveis (ou tirar a
#    diferenca X(t) - X(t-k))
#k <- 3
##############################
## applying transformations ##
##############################
######################
# Transformation 1: ##
######################
cols_1 <- c("bm_broad",
"bm",
"m1",
"m2",
"m3",
"m4",
"icbr",
"icbr_agr",
"icbr_metal",
"icbr_energy",
"ibcbr",
"pimpf",
"pimpf_extract",
"pimpf_manufac",
"retail_total",
"retail_fuel",
"retail_supermarket",
"retail_clothing",
"retail_house",
"retail_drugstore",
"retail_paper",
"retail_office",
"retail_others",
"retail_building",
"retail_auto",
"prod_vehicles",
"prod_agr_mach",
"vehicle_sales",
"min_wage",
"aggreg_wage",
"elec",
"elec_com",
"elec_res",
"elec_ind",
"cons_confidence",
"future_expec",
"irf_m",
"ima_s",
"ima_b",
"ima",
"saving_deposits",
"cred_total",
"debt_fedgov_old",
"debt_fedgov_new",
"treasury_emit",
"treasury_mkt",
"reer",
"usd_brl_end",
"usd_brl_avg",
"current_account",
"trade_balance",
"imports")
df <- df %>%
mutate_at(vars(all_of(cols_1)), ~acumula_indice_mensal(., k))
#######################
# Transformation 2: ###
#######################
cols_2 <- c("ipca_ali",
"ipca_hab",
"ipca_resid",
"ipca_vest",
"ipca_transp",
"ipca_comunic",
"ipca_saude",
"ipca_desp",
"ipca_educ",
"ipc_BR",
"igp_M",
"igp_DI",
"igp10",
"ipca15")
df <- df %>%
mutate_at(vars(all_of(cols_2)), ~acumula_var_mensal(., k))
#######################
# Transformation 3: ###
#######################
cols_3 <- c("tcu",
"unem",
"cred_gdp",
"indebt_house_19882",
"indebt_house_20400",
"net_debt_gdp",
"net_debt",
"net_debt_fedgov_bcb",
"net_debt_states",
"net_debt_cities",
"primary_result",
"treasury_term",
"treasury_dur")
df <- df %>%
mutate_at(vars(all_of(cols_3)), ~ lag(c(rep(NA,c(k-1)),diff(., c(k-1))),1))
#######################
#######################################################
# Anualizando ipca e adicionando lags como regressores#
#######################################################
df[,"ipca"] <- acumula_var_mensal(df[,"ipca"],12)
df <- df %>% mutate(ipca0 = ipca,
ipca1 = lag(ipca,1),
ipca2 = lag(ipca,2),
ipca3 = lag(ipca,3))
######################################
# Ajeitando datas e a coluna do ipca #
######################################
# quero deixar coluna do ipca um ano a frente, logo:
df <- df %>%
mutate(ipca = lead(ipca,11)) # usar comando de alguma funcao de dates
# por fim, para deixar as linhas baseadas nas datas das observacoes do ipca, como
# trouxe o ipca 12 casas pra baixo, fareio mesmo com as datas;
df$ref.date <- df$ref.date %m+% months(11)
####################
# ADICIONANDO FOCUS
###################
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2005-02-01",
end_date = "2022-02-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)%>%
arrange(date)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
# Ex: 2005-02-01 tem previsao pra 2006-01-01. Logo, como vou mergear com o df
#     cujas datas foram movidas 11 periodos a frente, farei o mesmo aqui e depois
#     darei um merge pela coluna das dates pra evitar confusao (q poderia ocorrer se usasse um cbind)
focus <- focus %>%
mutate(date = date %m+% months(11)) %>%
rename("ref.date" = "date",
"focus" = "median")
# merging
df <- merge(df, focus, by = "ref.date")
#####################
# Ajustes finais ###
####################
# como ultimas 12 linhas nao tem observacoes de ipca, posso deleta-las
df <- head(df, -12)
# como primeiras 11 linhas nao tem observacoes do ipca, deleto
df <- df[-c(1:11),]
# ajeitando rownames
df <- remove_rownames(df)
# ver dataframe df
saveRDS(df, file = paste0("df",k,".rds"))
}
df <- list(prices, commodities, real_sector, employment, electricity,
confidence,finance, credit, gov, inter) %>%
reduce(full_join, by='ref.date')
names_df <- colnames(df[,-1])
names_variables <- variable_description$variable
for (i in 1:length(names_df)) {
position <- which(names_variables == names_df[i])
lag_value <- variable_description$lag[position]
name <- names_df[i]
df[,name] <- lead(df[,name],n = lag_value)
}
rm(i)
k <- 1
df <- list(prices, commodities, real_sector, employment, electricity,
confidence,finance, credit, gov, inter) %>%
reduce(full_join, by='ref.date')
names_df <- colnames(df[,-1])
names_variables <- variable_description$variable
for (i in 1:length(names_df)) {
position <- which(names_variables == names_df[i])
lag_value <- variable_description$lag[position]
name <- names_df[i]
df[,name] <- lead(df[,name],n = lag_value)
}
rm(i)
k <- 1
cols_1 <- c("bm_broad",
"bm",
"m1",
"m2",
"m3",
"m4",
"icbr",
"icbr_agr",
"icbr_metal",
"icbr_energy",
"ibcbr",
"pimpf",
"pimpf_extract",
"pimpf_manufac",
"retail_total",
"retail_fuel",
"retail_supermarket",
"retail_clothing",
"retail_house",
"retail_drugstore",
"retail_paper",
"retail_office",
"retail_others",
"retail_building",
"retail_auto",
"prod_vehicles",
"prod_agr_mach",
"vehicle_sales",
"min_wage",
"aggreg_wage",
"elec",
"elec_com",
"elec_res",
"elec_ind",
"cons_confidence",
"future_expec",
"irf_m",
"ima_s",
"ima_b",
"ima",
"saving_deposits",
"cred_total",
"debt_fedgov_old",
"debt_fedgov_new",
"treasury_emit",
"treasury_mkt",
"reer",
"usd_brl_end",
"usd_brl_avg",
"current_account",
"trade_balance",
"imports")
df <- df %>%
mutate_at(vars(all_of(cols_1)), ~acumula_indice_mensal(., k))
cols_2 <- c("ipca_ali",
"ipca_hab",
"ipca_resid",
"ipca_vest",
"ipca_transp",
"ipca_comunic",
"ipca_saude",
"ipca_desp",
"ipca_educ",
"ipc_BR",
"igp_M",
"igp_DI",
"igp10",
"ipca15")
df <- df %>%
mutate_at(vars(all_of(cols_2)), ~acumula_var_mensal(., k))
cols_3 <- c("tcu",
"unem",
"cred_gdp",
"indebt_house_19882",
"indebt_house_20400",
"net_debt_gdp",
"net_debt",
"net_debt_fedgov_bcb",
"net_debt_states",
"net_debt_cities",
"primary_result",
"treasury_term",
"treasury_dur")
df <- df %>%
mutate_at(vars(all_of(cols_3)), ~ lag(c(rep(NA,c(k-1)),diff(., c(k-1))),1))
df <- list(prices, commodities, real_sector, employment, electricity,
confidence,finance, credit, gov, inter) %>%
reduce(full_join, by='ref.date')
names_df <- colnames(df[,-1])
names_variables <- variable_description$variable
for (i in 1:length(names_df)) {
position <- which(names_variables == names_df[i])
lag_value <- variable_description$lag[position]
name <- names_df[i]
df[,name] <- lead(df[,name],n = lag_value)
}
rm(i)
k <- 1
df[,"ipca"] <- acumula_var_mensal(df[,"ipca"],12)
df <- df %>% mutate(ipca0 = ipca,
ipca1 = lag(ipca,1),
ipca2 = lag(ipca,2),
ipca3 = lag(ipca,3))
df <- df %>%
mutate(ipca = lead(ipca,11)) # usar comando de alguma funcao de dates
df <- list(prices, commodities, real_sector, employment, electricity,
confidence,finance, credit, gov, inter) %>%
reduce(full_join, by='ref.date')
names_df <- colnames(df[,-1])
names_variables <- variable_description$variable
for (i in 1:length(names_df)) {
position <- which(names_variables == names_df[i])
lag_value <- variable_description$lag[position]
name <- names_df[i]
df[,name] <- lead(df[,name],n = lag_value)
}
rm(i)
k <- 1
df[,"ipca"] <- acumula_var_mensal(df[,"ipca"],12)
df <- df %>% mutate(ipca0 = ipca,
ipca1 = lag(ipca,1),
ipca2 = lag(ipca,2),
ipca3 = lag(ipca,3))
df <- df %>%
mutate(ipca = lead(ipca,11)) # usar comando de alguma funcao de dates
# por fim, para deixar as linhas baseadas nas datas das observacoes do ipca, como
# trouxe o ipca 12 casas pra baixo, fareio mesmo com as datas;
df$ref.date <- df$ref.date %m+% months(11)
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2005-02-01",
end_date = "2022-02-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)%>%
arrange(date)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
focus <- focus %>%
mutate(date = date %m+% months(11)) %>%
rename("ref.date" = "date",
"focus" = "median")
# merging
df <- merge(df, focus, by = "ref.date")
# como ultimas 12 linhas nao tem observacoes de ipca, posso deleta-las
df <- head(df, -12)
# como primeiras 11 linhas nao tem observacoes do ipca, deleto
df <- df[-c(1:11),]
# ajeitando rownames
df <- remove_rownames(df)
df <- list(prices, commodities, real_sector, employment, electricity,
confidence,finance, credit, gov, inter) %>%
reduce(full_join, by='ref.date')
names_df <- colnames(df[,-1])
names_variables <- variable_description$variable
for (i in 1:length(names_df)) {
position <- which(names_variables == names_df[i])
lag_value <- variable_description$lag[position]
name <- names_df[i]
df[,name] <- lead(df[,name],n = lag_value)
}
rm(i)
k <- 1
df[,"ipca"] <- acumula_var_mensal(df[,"ipca"],12)
df <- df %>% mutate(ipca0 = ipca,
ipca1 = lag(ipca,1),
ipca2 = lag(ipca,2),
ipca3 = lag(ipca,3))
df <- df %>%
mutate(ipca = lead(ipca,11)) # usar comando de alguma funcao de dates
# por fim, para deixar as linhas baseadas nas datas das observacoes do ipca, como
# trouxe o ipca 12 casas pra baixo, fareio mesmo com as datas;
df$ref.date <- df$ref.date %m+% months(11)
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2005-02-01",
end_date = "2022-02-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)%>%
arrange(date)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
focus <- focus %>%
mutate(date = date %m+% months(11)) %>%
rename("ref.date" = "date",
"focus" = "median")
# merging
df <- merge(df, focus, by = "ref.date")
# como ultimas 12 linhas nao tem observacoes de ipca, posso deleta-las
df <- head(df, -12)
# como primeiras 11 linhas nao tem observacoes do ipca, deleto
df <- df[-c(1:11),]
# ajeitando rownames
df <- remove_rownames(df)
saveRDS(df, file = paste0("df",k,".rds"))
library(randomForest)
library(tidyverse)
library(HDeconometrics)
library(Metrics)
library(reshape2)
library(ggplot2)
library(ggsci)
library(gridExtra)
library(glmnet)
library(rbcb)
library(lubridate)
library(forecast)
library(stargazer)
acumulacao <- 1:12 %>% as.list()
data <- acumulacao %>%
map(~paste("~/GitHub2/MONOGRAFIA_TITO/data_new/df",.x,".rds",sep = "")%>%
readRDS())
# horizonte
k <- 12
# window (fixed) size: vou usar data[[1]], mas poderia ser qualquer outro
window <- data[[1]] %>% filter(ref.date <"2014-01-01") %>% nrow()
# variavel dependente
y <- data[[1]] %>% #(poderia usar qualquer um dos dfs de data)
select(ipca) %>%
as.matrix()
# matriz de regressores
X <- data %>%
map(~.x %>%
select(-c(ref.date,ipca))%>%
select_if(~ !any(is.na(.))) %>% # tirando colunas com NA
as.matrix())
# numero de previsoes (igual pra todos)
size <- nrow(data[[1]]) - window - 1
# valores observados (out of sample)
y_obs <- y[(window+1):nrow(data[[1]])]
#####################
# 3.5) Random Walk ##
#####################
rw <- X[[1]] %>% as.data.frame() %>% select(ipca0)
rw <- rw[(window+1):nrow(X[[1]]),1]
rmse_rw = rmse(y_obs,rw)
# 5.4.1) Benchmark RMSE
#focus <- head(focus,-1)#apago a ultima linha pois queria end_date = "2022-01-01", mas tive que escrever end_date = "2022-02-01" por conta de um bug
focus <- data[[1]]$focus
focus <- focus[(window+1):nrow(data[[1]])]
rmse_focus <- rmse(y_obs,focus)
rmse_rw/rmse_focus
acumulacao <- 1:12 %>% as.list()
data <- acumulacao %>%
map(~paste("~/GitHub2/MONOGRAFIA_TITO/data_new/df",.x,".rds",sep = "")%>%
readRDS())
# horizonte
k <- 12
# window (fixed) size: vou usar data[[1]], mas poderia ser qualquer outro
window <- data[[1]] %>% filter(ref.date <"2014-01-01") %>% nrow()
# variavel dependente
y <- data[[1]] %>% #(poderia usar qualquer um dos dfs de data)
select(ipca) %>%
as.matrix()
# matriz de regressores
X <- data %>%
map(~.x %>%
select(-c(ref.date,ipca))%>%
select_if(~ !any(is.na(.))) %>% # tirando colunas com NA
as.matrix())
# numero de previsoes (igual pra todos)
size <- nrow(data[[1]]) - window - 1
# valores observados (out of sample)
y_obs <- y[(window+1):nrow(data[[1]])]
lasso_weight <- list()
step1.beta <- list()
omega <- list()
adalasso <- list()
for (i in 1:length(data)) {
# Parte 1: Calculando pesos via LASSO
lasso_weight[[i]] <- 0:size %>%
map_dbl(
function(x){ ic.glmnet(X[[i]][(1+ x):(window+ x), ],
y[(1+ x):(window+ x)], alpha = 1, crit = "bic")
}
)
step1.beta[[i]] <- coef(lasso_weight[[i]])[-1]
tau <- 1
omega[[i]] <- (abs(step1.beta[[i]]) + 1/sqrt(window))^(-tau)
# Parte 2: Calculado adalasso
adalasso[[i]] <- 0:size %>%
map_dbl(
function(x){ ic.glmnet(X[[i]][(1+ x):(window+ x), ],
y[(1+ x):(window+ x)], alpha = 1, penalty.factor = omega[[i]]) %>%
predict(X[[i]][(window+x + 1), ])}
)
}
