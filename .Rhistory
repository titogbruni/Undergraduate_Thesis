function(x){
ic_fit <- ic.glmnet(X[[i]][(1+ x):(window+ x), ],
y[(1+ x):(window+ x)], alpha = 1, crit = "bic")
unlist(coef(ic_fit, s = "lambda.min"))[-1] %>%
names() %>% # Extract variable names
as.character() # Convert to character vector
}
)
}
# Combine all frequency tables into one using dplyr's bind_rows()
lasso_freq <- lasso_select %>%
map(~.x %>% unlist() %>% table() %>% as.data.frame() %>%
rename("freq" = "."))
combined_df <- bind_rows(lasso_freq, .id = "id") %>%
group_by(id, freq) %>%  # group by common columns
summarize(total_freq = sum(Freq))  # summarize the frequency
# Keep only unique combinations of id and freq
combined_df <- unique(combined_df[, c("id", "freq", "total_freq")])
ridge <- list()
for (i in 1:length(data)) {
ridge[[i]] <- 0:size %>%
map_dbl(
function(x){ ic.glmnet(X[[i]][(1+ x):(window+ x), ],
y[(1+ x):(window+ x)], alpha = 0, crit = "bic") %>%
predict(X[[i]][(window+x + 1), ])}
)
}
#####################
# 3.5) Random Walk ##
#####################
rw <- X[[1]] %>% as.data.frame() %>% select(ipca0)
rw <- rw[(window+1):nrow(X[[1]]),1]
rw <- rep(list(rw), 12)
elnet <- list()
for (i in 1:length(data)) {
elnet[[i]] <- 0:size %>%
map_dbl(
function(x){ ic.glmnet(X[[i]][(1+ x):(window+ x), ],
y[(1+ x):(window+ x)], alpha = 0.5, crit = "bic") %>%
predict(X[[i]][(window+x + 1), ])}
)
}
lasso_weight <- list()
step1.beta <- list()
omega <- list()
adalasso <- list()
for (i in 1:length(data)) {
# Parte 1: Calculando pesos via LASSO
lasso_weight[[i]] <- 0:size %>%
map(
function(x){ ic.glmnet(X[[i]][(1+ x):(window+ x), ],
y[(1+ x):(window+ x)], alpha = 1, crit = "bic")
}
)
step1.beta[[i]] <- 1:(size+1) %>%
map(
function(x){
coef(lasso_weight[[i]][[x]])[-1]
}
)
tau <- 1
omega[[i]] <- 1:(size+1) %>%
map(
function(x){
(abs(step1.beta[[i]][[x]]) + 1/sqrt(window))^(-tau)
}
)
# Parte 2: Calculado adalasso
adalasso[[i]] <- 0:size %>%
map_dbl(
function(x){ ic.glmnet(X[[i]][(1+ x):(window+ x), ],
y[(1+ x):(window+ x)], alpha = 1, penalty.factor = omega[[i]][[x+1]]) %>%
predict(X[[i]][(window+x + 1), ])}
)
}
library(tidyverse)
library(readxl)
variaveis_descricao <- read_excel("GitHub2/MONOGRAFIA_TITO/variaveis_descricao.xlsx")
View(variaveis_descricao)
df<- read_excel("GitHub2/MONOGRAFIA_TITO/variaveis_descricao.xlsx")
View(df)
View(df)
stargazer::stargazer(df,summary = F)
View(df)
library(stargazer)
library(tidyverse)
library(stargazer)
df<- read_excel("GitHub2/MONOGRAFIA_TITO/variaveis_descricao.xlsx")
stargazer::stargazer(df,summary = F)
stargazer(df,summary = F)
load("~/GitHub2/MONOGRAFIA_TITO/data_new/rolling_forecast/forecast_rollingworkspace.RData")
lasso[[1]]%>%length()
lasso[[3]]%>%length()
ridge[[3]]%>%length()
load("~/GitHub2/MONOGRAFIA_TITO/data_new/rolling_forecast/forecast_rollingworkspace.RData")
View(mad_normal)
mad_normal %>% round(2)
library(tidyverse)
mad_normal %>% round(2)
mad_normal <- mad_normal %>% round(2)
mean(mad_normal[1,])
mad_normal[1,]
mad_normal[1,]%>% as.numeric()
mad_normal[1,]%>% as.numeric() %>% mean()
mad_normal[,1]%>% as.numeric() %>% mean()
mad_normal
mad_normal[,2]%>% as.numeric() %>% mean()
rmse_normal
rmse_normal%>% view()
# 5.4.1) Benchmark RMSE
#focus <- head(focus,-1)#apago a ultima linha pois queria end_date = "2022-01-01", mas tive que escrever end_date = "2022-02-01" por conta de um bug
focus <- data[[1]]$focus
focus <- focus[(window+1):nrow(data[[1]])]
rmse_focus <- rmse(y_obs,focus)
library(randomForest)
library(tidyverse)
library(HDeconometrics)
library(Metrics)
library(reshape2)
library(ggplot2)
library(ggsci)
library(gridExtra)
library(glmnet)
library(rbcb)
library(lubridate)
library(forecast)
library(stargazer)
# 5.4.1) Benchmark RMSE
#focus <- head(focus,-1)#apago a ultima linha pois queria end_date = "2022-01-01", mas tive que escrever end_date = "2022-02-01" por conta de um bug
focus <- data[[1]]$focus
focus <- focus[(window+1):nrow(data[[1]])]
rmse_focus <- rmse(y_obs,focus)
# 5.4.2) Normalizing rmse with rmse_focus
rmse_normal <- rmse/rmse_focus
rmse_mae_normal %>% view()
rmse_normal %>% view()
load("~/GitHub2/MONOGRAFIA_TITO/data_new/rolling_forecast/forecast_rollingworkspace.RData")
rmse_normal
rmse_normal%>% view()
rmse_mae_normal%>% view()
rmse_normal %>% head()
rmse <- prediction %>%
map(. %>%
summarise_all(~rmse(y_obs, .))
)
mae <- prediction %>%
map(. %>%
summarise_all(~mae(y_obs, .)) %>%
round(3))
mad <- error %>%
map(. %>%
summarise_all(~mad(.)))
rmse <- map(rmse,as.data.frame) %>%
bind_rows()
mae <- map(mae,as.data.frame) %>%
bind_rows()
mad <- map(mad,as.data.frame) %>%
bind_rows()
# 5.4.1) Benchmark RMSE
#focus <- head(focus,-1)#apago a ultima linha pois queria end_date = "2022-01-01", mas tive que escrever end_date = "2022-02-01" por conta de um bug
focus <- data[[1]]$focus
focus <- focus[(window+1):nrow(data[[1]])]
rmse_focus <- rmse(y_obs,focus)
# 5.4.2) Normalizing rmse with rmse_focus
rmse_normal <- rmse/rmse_focus
View(rmse_normal)
mad_focus %>% view()
view(mad)
mad_focus %>% view()
mad_normal
mad_normal%>%view()
mad_normal[,1] %>% as.numeric() %>% mean()
rmse_normal[,1] %>% as.numeric() %>% mean()
mae_normal[,1] %>% as.numeric() %>% mean()
load("~/GitHub2/MONOGRAFIA_TITO/data_new/rolling_forecast/forecast_rollingworkspace.RData")
mad_normal <- mad/mad_focus
View(mad_normal)
mad_normal <- mad_normal %>%
select(-c("RW"))
# transposing
mad_normal <- t(mad_normal) %>% as.data.frame()
View(mad_normal)
mad_normal %>% rowMeans()
stargazer(mad_normal,summary = F, digits = 2)
load("~/GitHub2/MONOGRAFIA_TITO/data_new/expanding_forecast/models_expanding_workspace.RData")
prediction <- pmap(
list(rf,csr,lasso), function(first,second,third){
cbind(first, second, third)
}
) %>%
map(~.x %>%
as.data.frame %>%
rename("RF" = first,
"CSR" = second,
"LASSO" = third
))
prediction <- map2(prediction,adalasso,cbind) %>%
map(~.x %>%
rename("adalasso" = ".y[[i]]"))
prediction <- map2(prediction,elnet,cbind) %>%
map(~.x %>%
rename("ElNet" = ".y[[i]]"))
prediction <- map2(prediction,ridge,cbind) %>%
map(~.x %>%
rename("RIDGE" = ".y[[i]]"))
prediction <- map2(prediction,rw,cbind) %>%
map(~.x %>%
rename("RW" = ".y[[i]]"))
error <- prediction %>%
map(~y_obs - .x)
rmse <- prediction %>%
map(. %>%
summarise_all(~rmse(y_obs, .))
)
mae <- prediction %>%
map(. %>%
summarise_all(~mae(y_obs, .)) %>%
round(3))
mad <- error %>%
map(. %>%
summarise_all(~mad(.)))
rmse <- map(rmse,as.data.frame) %>%
bind_rows()
mae <- map(mae,as.data.frame) %>%
bind_rows()
mad <- map(mad,as.data.frame) %>%
bind_rows()
View(mad)
mad_focus <- mad(y_obs,focus)
rmse <- prediction %>%
map(. %>%
summarise_all(~rmse(y_obs, .))
)
mae <- prediction %>%
map(. %>%
summarise_all(~mae(y_obs, .)) %>%
round(3))
mad <- error %>%
map(. %>%
summarise_all(~mad(.)))
rmse <- map(rmse,as.data.frame) %>%
bind_rows()
mae <- map(mae,as.data.frame) %>%
bind_rows()
mad <- map(mad,as.data.frame) %>%
bind_rows()
# 5.4.1) Benchmark RMSE
#focus <- head(focus,-1)#apago a ultima linha pois queria end_date = "2022-01-01", mas tive que escrever end_date = "2022-02-01" por conta de um bug
focus <- data[[1]]$focus
focus <- focus[(window+1):nrow(data[[1]])]
rmse_focus <- rmse(y_obs,focus)
# 5.4.2) Normalizing rmse with rmse_focus
rmse_normal <- rmse/rmse_focus
# guardando a estatisticas descritivas
avg_rmse_normal <- rmse_normal %>% colMeans()
max_rmse_normal <- apply(rmse_normal, 2, max)
min_rmse_normal <- apply(rmse_normal, 2, min)
# excluo RW
rmse_normal <- rmse_normal %>%
select(-c("RW"))
# transposing
rmse_normal <- t(rmse_normal) %>% as.data.frame()
rownames(rmse_normal) <- NULL
mae_focus <- mae(y_obs,focus)
mae_normal <- mae/mae_focus
# guardando estatisticas descritivas
avg_mae_normal <- mae_normal %>% colMeans()
max_mae_normal <- apply(mae_normal, 2, max)
min_mae_normal <- apply(mae_normal, 2, min)
mae_normal <- mae_normal %>%
select(-c("RW"))
# transposing
mae_normal <- t(mae_normal) %>% as.data.frame()
rownames(mae_normal) <- NULL
mad_focus <- mad(y_obs,focus)
mad_normal <- mad/mad_focus
mad_normal %>% view()
# transposing
mad_normal <- t(mad_normal) %>% as.data.frame()
mad_normal %>% view()
max(mad_normal[1,])
mean(mad_normal[1,])
mean(mad_normal[1,]%>%as.numeric())
stargazer(mad_normal,summary = F, digits = 2)
X[[1]]
X[[1]] %>% view()
X[[4]] %>% view()
load("~/GitHub2/MONOGRAFIA_TITO/data_new/rolling_forecast/forecast_rollingworkspace.RData")
X[[1]] %>% view()
library(GetBCBData)
library(rbcb)
library(tidyverse)
library(readxl)
library(lubridate)
library(zoo)
# 2) Caminho para a pasta
setwd("~/GitHub2/MONOGRAFIA_TITO")
# 3) chamando o .xlsx que descreve as variaveis (lags e transformacoes)
variable_description <- read_excel("variaveis_descricao.xlsx")
prices = GetBCBData::gbcbd_get_series(
c(ipca = 433,
ipca_ali = 1635,
ipca_hab = 1636,
ipca_resid = 1637,
ipca_vest = 1638,
ipca_transp = 1639,
ipca_comunic = 1640,
ipca_saude = 1641,
ipca_desp = 1642,
ipca_educ = 1643,
ipc_BR = 191,
igp_M = 189,
igp_DI = 190,
igp10 = 7447,
ipca15 = 7478,
bm_broad = 1788,
bm = 1785,
m1 = 1783,
m2 = 1786,
m3 = 27813,
m4 = 27815
),
first.date = '2006-01-15',
last.date = '2023-01-01',
format.data = 'wide'
)
load("~/GitHub2/MONOGRAFIA_TITO/micro_dataframes.RData")
df <- list(prices, commodities, real_sector, employment, electricity,
confidence,finance, credit, gov, inter) %>%
reduce(full_join, by='ref.date')
# Excluo ref.date e ipca do loop
names_df <- colnames(df[,-(1:2)])
names_variables <- variable_description$variable
for (i in 1:length(names_df)) {
position <- which(names_variables == names_df[i])
lag_value <- variable_description$lag[position]
name <- names_df[i]
df[,name] <- lag(df[,name],n = lag_value)
}
rm(i)
df <- df %>% mutate(ipca0 = lag(ipca,1),
ipca1 = lag(ipca,2),
ipca2 = lag(ipca,3),
ipca3 = lag(ipca,4))
load("~/GitHub2/MONOGRAFIA_TITO/micro_dataframes.RData")
df <- list(prices, commodities, real_sector, employment, electricity,
confidence,finance, credit, gov, inter) %>%
reduce(full_join, by='ref.date')
# Excluo ref.date e ipca do loop
names_df <- colnames(df[,-(1:2)])
names_variables <- variable_description$variable
for (i in 1:length(names_df)) {
position <- which(names_variables == names_df[i])
lag_value <- variable_description$lag[position]
name <- names_df[i]
df[,name] <- lag(df[,name],n = lag_value)
}
rm(i)
df[,"ipca"] <- acumula_var_mensal(df[,"ipca"],12)
df <- df %>% mutate(ipca0 = lag(ipca,1),
ipca1 = lag(ipca,2),
ipca2 = lag(ipca,3),
ipca3 = lag(ipca,4))
df <- df %>%
mutate(ipca = lead(ipca,11)) # usar comando de alguma funcao de dates
# por fim, para deixar as linhas baseadas nas datas das observacoes do ipca, como
# trouxe o ipca 12 casas pra baixo, fareio mesmo com as datas;
df$ref.date <- df$ref.date %m+% months(11)
focus <- get_twelve_months_inflation_expectations(indic = c("IPCA"),
start_date = "2005-02-01",
end_date = "2022-02-01") %>%
filter(smoothed == "N",
base == 0) %>%
select(date,median) %>%
group_by(year(date), month(date)) %>%
filter(day(date) == max(day(date)))%>%
ungroup() %>%
select(date,median)%>%
arrange(date)
# forçando dias a serem registrados como "01"
day(focus$date) <- 01
focus <- focus %>%
mutate(date = date %m+% months(11)) %>%
rename("ref.date" = "date",
"focus" = "median")
# merging
df <- merge(df, focus, by = "ref.date")
df <- df[-c(1:12),]
# ajeitando rownames
df <- remove_rownames(df)
View(df)
df1 <- readRDS("~/GitHub2/MONOGRAFIA_TITO/data_new/df1.rds")
View(df1)
df1 <- readRDS("~/GitHub2/MONOGRAFIA_TITO/data_new/df1.rds")
acumulacao <- 1:12 %>% as.list()
data <- acumulacao %>%
map(~paste("~/GitHub2/MONOGRAFIA_TITO/data_new/df",.x,".rds",sep = "")%>%
readRDS())
data[[1]] %>% view()
# horizonte
k <- 12
# window (fixed) size: vou usar data[[1]], mas poderia ser qualquer outro
window <- data[[1]] %>% filter(ref.date <"2014-01-01") %>% nrow()
# variavel dependente
y <- data[[1]] %>% #(poderia usar qualquer um dos dfs de data)
select(ipca) %>%
as.matrix()
# matriz de regressores
X <- data %>%
map(~.x %>%
select(-c(ref.date,ipca))%>%
select_if(~ !any(is.na(.))) %>% # tirando colunas com NA
as.matrix())
# numero de previsoes (igual pra todos)
size <- nrow(data[[1]]) - window - 1 #-1 porque nos loops faco 0:size, o que dá size+1 previsoes.
# valores observados (out of sample)
y_obs <- y[(window+1):nrow(data[[1]])]
X[[1]] %>% view()
acumulacao <- 1:12 %>% as.list()
data <- acumulacao %>%
map(~paste("~/GitHub2/MONOGRAFIA_TITO/data_new/df",.x,".rds",sep = "")%>%
readRDS())
# horizonte
k <- 12
# window (fixed) size: vou usar data[[1]], mas poderia ser qualquer outro
window <- data[[1]] %>% filter(ref.date <"2014-01-01") %>% nrow()
# variavel dependente
y <- data[[1]] %>% #(poderia usar qualquer um dos dfs de data)
select(ipca) %>%
as.matrix()
# matriz de regressores
X <- data %>%
map(~.x %>%
select(-c(ref.date,ipca))%>%
#select_if(~ !any(is.na(.))) %>% # tirando colunas com NA
as.matrix())
# numero de previsoes (igual pra todos)
size <- nrow(data[[1]]) - window - 1 #-1 porque nos loops faco 0:size, o que dá size+1 previsoes.
# valores observados (out of sample)
y_obs <- y[(window+1):nrow(data[[1]])]
rf <- list()
for (i in 1:length(data)) {
rf[[i]] <- 0:size %>%
map_dbl(
function(x){ randomForest(X[[i]][(1+ x):(window+x), ],
y[(1+ x):(window+ x)]) %>%
predict(X[[i]][(window+x + 1), ])}
)
}
data[[1]] %>% view()
# matriz de regressores
X <- data %>%
map(~.x %>%
select(-c(ref.date,ipca))%>%
#select_if(~ !any(is.na(.))) %>% # tirando colunas com NA
as.matrix())
# numero de previsoes (igual pra todos)
size <- nrow(data[[1]]) - window - 1 #-1 porque nos loops faco 0:size, o que dá size+1 previsoes.
# valores observados (out of sample)
y_obs <- y[(window+1):nrow(data[[1]])]
rf <- list()
for (i in 1:length(data)) {
rf[[i]] <- 0:size %>%
map_dbl(
function(x){ randomForest(X[[i]][(1+ x):(window+x), ] %>% select_if(~ !any(is.na(.))) ,
y[(1+ x):(window+ x)]) %>%
predict(X[[i]][(window+x + 1), ])}
)
}
[]
View(df1)
library(randomForest)
library(tidyverse)
library(HDeconometrics)
library(Metrics)
library(reshape2)
library(ggplot2)
library(ggsci)
library(gridExtra)
library(glmnet)
library(rbcb)
library(lubridate)
library(forecast)
library(stargazer)
acumulacao <- 1:12 %>% as.list()
data <- acumulacao %>%
map(~paste("~/GitHub2/MONOGRAFIA_TITO/data_new/df",.x,".rds",sep = "")%>%
readRDS())
# horizonte
k <- 12
# window (fixed) size: vou usar data[[1]], mas poderia ser qualquer outro
window <- data[[1]] %>% filter(ref.date <"2014-01-01") %>% nrow()
# variavel dependente
y <- data[[1]] %>% #(poderia usar qualquer um dos dfs de data)
select(ipca) %>%
as.matrix()
# matriz de regressores
X <- data %>%
map(~.x %>%
select(-c(ref.date,ipca))%>%
select_if(~ !any(is.na(.))) %>% # tirando colunas com NA
as.matrix())
# numero de previsoes (igual pra todos)
size <- nrow(data[[1]]) - window - 1 #-1 porque nos loops faco 0:size, o que dá size+1 previsoes.
# valores observados (out of sample)
y_obs <- y[(window+1):nrow(data[[1]])]
vector("list", size+1)
X_list <- vector("list", size+1)
X[[1]][(1+0):(window+0), ]
X[[1]][(1+0):(window+0), ] %>% select_if(~ !any(is.na(.)))
View(data)
data[[1]] %>% view()
